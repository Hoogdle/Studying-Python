### DAY1

## {파이썬을 사용하는 이유}

# 1. 소프트웨어 관리에 유용
# 읽고 쓰기 편함.
# 코드의 재사용 유용

# 2. 개발속도가 빠름
# 코드를 짧게 작성 가능
# 디버깅,코딩작성 시간 감소

# 3. 거의 모든 플랫폼에서 이용 가능
# 리눅스,윈도우,맥 모두 같은 파이썬 코드로 사용

# 4. 수많은 라이르러리

# 5. 어플리케이션간 소통이 원할
# 부분적인 파이썬 사용가능
# C 또는 C++ 라이브러리 사용가능

## {파이썬의 단점}

# C or C++ 보다 속도가 느릴 수 있음
# 파이썬은 '소스코드->바이트코드->머신코드' 의 과정을 거침


## {파이썬은 누가 사용하는가?}

# 1. 구글
# 웹서치 시스템
# 웹개발 프레임워크

# 2. 유튜브

# 3. 드랍박스

# 4. 넷플릭스

# 5. 문명게임

# 6. 인텔,시스코,HP,IBM

## {파이썬으로 무엇을 할 수 있는가?}

# 거의 모든 일을 할 수 있음

# 1. 시스템 개발
# 2. GUI
# 3. 인터넷을 이용한 네트워크간 소통
# 서버 쪽 정보를 가져오거나 불러올 수 있음
# XML,JSON의 데이터 가져올 수 있음
# 프론트엔드 개발 가능
# 4. 많은 언어 또는 어플리케이션과 결합 가능
# 5. 프로토타입 프로그래밍
# 6. 데이터 관련 직업에 사용
# 데이터 분석
# 데이터 과학
# 데이터 마이닝
# 머신, 딥 러닝
# 인공지능
# 데이터 베이스 활용
# etc....

## {파이썬의 강점}

# 1. Object-Oriented, 객체-지향형 
# 프로그램 관리 유용
# 코드 재활용 유용

# 2. Free

# 3. 강력함
# C 같은 시스템 언어를 대체 가능할 정도로 잘 만들어짐
# 작성하기 쉬움
# 자동으로 변수 타입을 식별
# 메모리를 자동으로 관리함
# 이미 만들어진 데이터 타입 존재
# 이미 만들어지 함수 존재
# 다양한 확장형 라이브러리

## {파이썬 탄생 이야기}

# 파이썬을 개발한 Gudio van Rossum 라는 사람이 코미디 시리즈 Monty Python 의 광팬.


## {파이썬의 철학} import this
# Explicit is better than implicit.
# Simple is better than complex.

## {프로그래밍 언어란 무엇인가?}
# 컴퓨터에게 지시하는 언어
# 컴퓨터가 알아들을 수 있는것 == 0 or 1
# 0과 1로 회로를 on/off 함
# 여러가지 회로 : 사칙연산 회로,반복 회로, 건너뛰기 회로, 조건문 회로

## {Python 통역과정}
# Python Script => Compiler => Byte Code(for VM) => Python VM => Machine Code (for CPU)

## {Python Interpreter}
# 위 과정을 자동으로 수행
# 프로그램을 실행시키기 위한 다른 하나의 프로그램
# 파이썬 언어로 txt 파일 작성 => 확장자 .py로 저장 => 파이썬 인터프레터로 실행

## {CMD}
# 파이썬 소스코드 파일 저장위치로 이동
# python 소스코드명.py 

## {Byte Code}
# 소스코드 보다 실행속도가 빠름
# 코드를 재활용 할 땐 Byte code로 이미 전환된 .pyc 파일을 실행시킴.(속도 up)

## {PVM} Python Virtual Machine
# Byte Code를 기계어로 바꾸어 컴퓨터에게 작업을 시킴

## {다양한 파이썬 인터프레터}
# PyPy : 바로 기계어로 전환, 작업속도 매우 빠름
# 라이브러리 연동성이 떨어져 대중적이지 않음

## {파이썬 실행방법}
# 1.cmd 에서 python
# 2. .py 파일, 파이썬 인터프레터로 실행
# 3. import 소스코드명 (한 번만 사용가능)
# 4. reload
# 5. IDE